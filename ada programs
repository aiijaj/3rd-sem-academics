SELECTION SORT
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void selectionsort(int arr[],int n){
    for(int i=0;i<n-1;i++){
        int min_index=i;
        for(int j=i+1;j<n;j++){
            if(arr[j]<arr[min_index]){
                min_index=j;
                }
        }
        int temp=arr[i];
        arr[i]=arr[min_index];
        arr[min_index]=temp;
    }
}
int main(){
    int n;
    printf("enter the number of elements:");
    scanf("%d",&n);
int arr[n];
srand(time(NULL));
for(int i=0;i<n;i++){
    arr[i]=rand() %1000;
}
clock_t start_time=clock();
selectionsort(arr,n);
clock_t end_time=clock();
double time_taken=((double)(end_time-start_time))/CLOCKS_PER_SEC;
printf("time taken to sort %d elements:%lf seconds",n,time_taken);
}


SUBSET
#include<stdio.h>
#include<stdbool.h>
bool subsetsum(int set[],int n,int sum)
{
	bool dp[n+1][sum+1];
	for(int i=0;i<=n;i++)
	dp[i][0]=true;
	
	for(int i=1;i<=sum;i++)
	dp[0][i]=false;
	
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=sum;j++)
		{
			if(j<set[i-1])
			dp[i][j]=dp[i-1][j];
			else
			dp[i][j]=dp[i-1][j]||dp[i-1][j-set[i-1]];
		}
	}
	if(dp[n][sum])
	{
		printf("Subset with the given sum if found:");
		int i=n,j=sum;
		while(i>0&&j>0)
		{
			if(dp[i][j]&&!dp[i-1][j])
			{
				printf("%d ",set[i-1]);
				j-=set[i-1];
			}
			i--;
		}
		printf("\n");
		return true;
	}
	else
	{
		printf("No subset with the given sum exists.\n");
		return false;
	}
}
int main()
{
	int n,sum;
	printf("Enter the no of elements in the set:");
	scanf("%d",&n);
	
	int set[n];
	printf("Enter the elements of the set:\n");
	for(int i=0;i<n;i++)
	scanf("%d",&set[i]);
	printf("Enter the desired sum:");
	scanf("%d",&sum);
	subsetsum(set,n,sum);
	return 0;
}

KNAPSACK
#include<stdio.h>
#include<stdlib.h>
struct Item
{
	int value,weight;
};
int compare(const void *a,const void *b)
{
	double ratioA=((struct Item *)b)->value/(double)((struct Item *)b)->weight;
	double ratioB=((struct Item *)a)->value/(double)((struct Item *)a)->weight;
	return ratioA>ratioB?1:-1;
}
int discreteknap(struct Item items[],int n,int cap)
{
	qsort(items,n,sizeof(items[0]),compare);
	int totalvalue=0;
	int remainingcap=cap;
	for(int i=0;i<n;i++)
	{
		if(items[i].weight<=remainingcap)
		{
			totalvalue+=items[i].value;
			remainingcap-=items[i].weight;
		}
		else{
			double fraction=(double)remainingcap/(double)items[i].weight;
			totalvalue+=items[i].value * fraction;
			break;
		}
	}
	return totalvalue;
}
double contiknap(struct Item items[],int n,int cap)
{
	qsort(items,n,sizeof(items[0]),compare);
	double totalvalue=0;
	for(int i=0;i<n;i++)
	{
		if(items[i].weight<=cap)
		{
			totalvalue+=items[i].value;
			cap-=items[i].weight;
		}
		else{
			totalvalue+=items[i].value * ((double)cap/(double)items[i].weight);
			break;
		}
	}
	return totalvalue;
}
int main()
{
	int n,cap;
	printf("Enter the no of items:");
	scanf("%d",&n);
	struct Item items[n];
	printf("Enter the value and weight of each item:\n");
	for(int i=0;i<n;i++)
	{
		scanf("%d%d",&items[i].value,&items[i].weight);
	}
	printf("Enter the capacity of knapsack");
	scanf("%d",&cap);
	int maxvalue=discreteknap(items,n,cap);
	printf("Maximum value in discrete knapsack:%d\n",maxvalue);
	double maxvaluecont=contiknap(items,n,cap);
	printf("Maximum value in continuous kanpsack:%.2f\n",maxvaluecont);
	return 0;
}

QUICK
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void swap(int *a,int *b)
{
	int temp=*a;
	*a=*b;
	*b=temp;
}
int partition(int arr[],int low,int high)
{
	int pivot=arr[high];
	int i=low-1;
	for(int j=low;j<=high-1;j++)
	{
		if(arr[j]<pivot)
		{
			i++;
			swap(&arr[i],&arr[j]);
		}
	}
	swap(&arr[i+1],&arr[high]);
	return i+1;
}
void quicksort(int arr[],int low,int high)
{
	if(low<high)
	{
		int pi=partition(arr,low,high);
		quicksort(arr,low,pi-1);
		quicksort(arr,pi+1,high);
	}
}
int main()
{
	int n;
	printf("Enter the number of elements:");
	scanf("%d",&n);
	int arr[n];
	srand(time(NULL));
	for(int i=0;i<n;i++)
	{
		arr[i]=rand()%1000;
	}
	clock_t start_time=clock();
	quicksort(arr,0,n-1);
	clock_t end_time=clock();
	double time_taken=((double)(end_time-start_time))/CLOCKS_PER_SEC;
	printf("Time taken to sort %d elements: %lf\n",n,time_taken);
	return 0;
}
